<?php
/**
 * DefaultApi
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Streaming Video Service API
 *
 * API for managing movies and reviews in a streaming video service.
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.9.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use sdk\vendor\guzzlehttp\psr7\src\Request;
use GuzzleHttp\RequestOptions;
use OpenAPI\Client\ApiException;
use OpenAPI\Client\Configuration;
use sdk\lib\HeaderSelector;
use OpenAPI\Client\ObjectSerializer;

/**
 * DefaultApi Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class DefaultApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var sdk\lib\HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /** @var string[] $contentTypes **/
    public const contentTypes = [
        'moviesGet' => [
            'application/json',
        ],
        'moviesMovieIdDelete' => [
            'application/json',
        ],
        'moviesMovieIdGet' => [
            'application/json',
        ],
        'moviesMovieIdPut' => [
            'application/json',
        ],
        'moviesPost' => [
            'application/json',
        ],
        'reviewsGet' => [
            'application/json',
        ],
        'reviewsPost' => [
            'application/json',
        ],
        'reviewsReviewIdDelete' => [
            'application/json',
        ],
        'reviewsReviewIdGet' => [
            'application/json',
        ],
        'reviewsReviewIdPut' => [
            'application/json',
        ],
    ];

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param sdk\lib\HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: Configuration::getDefaultConfiguration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation moviesGet
     *
     * Get a list of all movies
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['moviesGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\Movie[]
     */
    public function moviesGet(string $contentType = self::contentTypes['moviesGet'][0])
    {
        list($response) = $this->moviesGetWithHttpInfo($contentType);
        return $response;
    }

    /**
     * Operation moviesGetWithHttpInfo
     *
     * Get a list of all movies
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['moviesGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\Movie[], HTTP status code, HTTP response headers (array of strings)
     */
    public function moviesGetWithHttpInfo(string $contentType = self::contentTypes['moviesGet'][0])
    {
        $request = $this->moviesGetRequest($contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\Movie[]' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\Movie[]' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\Movie[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\OpenAPI\Client\Model\Movie[]';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\Movie[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation moviesGetAsync
     *
     * Get a list of all movies
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['moviesGet'] to see the possible values for this operation
     *
     * @return sdk\vendor\guzzlehttp\promises\src\PromiseInterface
     * @throws \InvalidArgumentException
     */
    public function moviesGetAsync(string $contentType = self::contentTypes['moviesGet'][0])
    {
        return $this->moviesGetAsyncWithHttpInfo($contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation moviesGetAsyncWithHttpInfo
     *
     * Get a list of all movies
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['moviesGet'] to see the possible values for this operation
     *
     * @return sdk\vendor\guzzlehttp\promises\src\PromiseInterface
     * @throws \InvalidArgumentException
     */
    public function moviesGetAsyncWithHttpInfo(string $contentType = self::contentTypes['moviesGet'][0])
    {
        $returnType = '\OpenAPI\Client\Model\Movie[]';
        $request = $this->moviesGetRequest($contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'moviesGet'
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['moviesGet'] to see the possible values for this operation
     *
     * @return sdk\vendor\guzzlehttp\psr7\src\Request
     * @throws \InvalidArgumentException
     */
    public function moviesGetRequest(string $contentType = self::contentTypes['moviesGet'][0])
    {


        $resourcePath = '/movies';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation moviesMovieIdDelete
     *
     * Delete movie
     *
     * @param  int $movie_id movie_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['moviesMovieIdDelete'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function moviesMovieIdDelete($movie_id, string $contentType = self::contentTypes['moviesMovieIdDelete'][0])
    {
        $this->moviesMovieIdDeleteWithHttpInfo($movie_id, $contentType);
    }

    /**
     * Operation moviesMovieIdDeleteWithHttpInfo
     *
     * Delete movie
     *
     * @param  int $movie_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['moviesMovieIdDelete'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function moviesMovieIdDeleteWithHttpInfo($movie_id, string $contentType = self::contentTypes['moviesMovieIdDelete'][0])
    {
        $request = $this->moviesMovieIdDeleteRequest($movie_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation moviesMovieIdDeleteAsync
     *
     * Delete movie
     *
     * @param  int $movie_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['moviesMovieIdDelete'] to see the possible values for this operation
     *
     * @return sdk\vendor\guzzlehttp\promises\src\PromiseInterface
     * @throws \InvalidArgumentException
     */
    public function moviesMovieIdDeleteAsync($movie_id, string $contentType = self::contentTypes['moviesMovieIdDelete'][0])
    {
        return $this->moviesMovieIdDeleteAsyncWithHttpInfo($movie_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation moviesMovieIdDeleteAsyncWithHttpInfo
     *
     * Delete movie
     *
     * @param  int $movie_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['moviesMovieIdDelete'] to see the possible values for this operation
     *
     * @return sdk\vendor\guzzlehttp\promises\src\PromiseInterface
     * @throws \InvalidArgumentException
     */
    public function moviesMovieIdDeleteAsyncWithHttpInfo($movie_id, string $contentType = self::contentTypes['moviesMovieIdDelete'][0])
    {
        $returnType = '';
        $request = $this->moviesMovieIdDeleteRequest($movie_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'moviesMovieIdDelete'
     *
     * @param  int $movie_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['moviesMovieIdDelete'] to see the possible values for this operation
     *
     * @return sdk\vendor\guzzlehttp\psr7\src\Request
     *@throws \InvalidArgumentException
     */
    public function moviesMovieIdDeleteRequest($movie_id, string $contentType = self::contentTypes['moviesMovieIdDelete'][0])
    {

        // verify the required parameter 'movie_id' is set
        if ($movie_id === null || (is_array($movie_id) && count($movie_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $movie_id when calling moviesMovieIdDelete'
            );
        }


        $resourcePath = '/movies/{movieId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($movie_id !== null) {
            $resourcePath = str_replace(
                '{' . 'movieId' . '}',
                ObjectSerializer::toPathValue($movie_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'DELETE',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation moviesMovieIdGet
     *
     * Get movie by ID
     *
     * @param  int $movie_id movie_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['moviesMovieIdGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\Movie
     */
    public function moviesMovieIdGet($movie_id, string $contentType = self::contentTypes['moviesMovieIdGet'][0])
    {
        list($response) = $this->moviesMovieIdGetWithHttpInfo($movie_id, $contentType);
        return $response;
    }

    /**
     * Operation moviesMovieIdGetWithHttpInfo
     *
     * Get movie by ID
     *
     * @param  int $movie_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['moviesMovieIdGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\Movie, HTTP status code, HTTP response headers (array of strings)
     */
    public function moviesMovieIdGetWithHttpInfo($movie_id, string $contentType = self::contentTypes['moviesMovieIdGet'][0])
    {
        $request = $this->moviesMovieIdGetRequest($movie_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\Movie' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\Movie' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\Movie', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\OpenAPI\Client\Model\Movie';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\Movie',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation moviesMovieIdGetAsync
     *
     * Get movie by ID
     *
     * @param  int $movie_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['moviesMovieIdGet'] to see the possible values for this operation
     *
     * @return sdk\vendor\guzzlehttp\promises\src\PromiseInterface
     * @throws \InvalidArgumentException
     */
    public function moviesMovieIdGetAsync($movie_id, string $contentType = self::contentTypes['moviesMovieIdGet'][0])
    {
        return $this->moviesMovieIdGetAsyncWithHttpInfo($movie_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation moviesMovieIdGetAsyncWithHttpInfo
     *
     * Get movie by ID
     *
     * @param  int $movie_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['moviesMovieIdGet'] to see the possible values for this operation
     *
     * @return sdk\vendor\guzzlehttp\promises\src\PromiseInterface
     * @throws \InvalidArgumentException
     */
    public function moviesMovieIdGetAsyncWithHttpInfo($movie_id, string $contentType = self::contentTypes['moviesMovieIdGet'][0])
    {
        $returnType = '\OpenAPI\Client\Model\Movie';
        $request = $this->moviesMovieIdGetRequest($movie_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'moviesMovieIdGet'
     *
     * @param  int $movie_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['moviesMovieIdGet'] to see the possible values for this operation
     *
     * @return sdk\vendor\guzzlehttp\psr7\src\Request
     *@throws \InvalidArgumentException
     */
    public function moviesMovieIdGetRequest($movie_id, string $contentType = self::contentTypes['moviesMovieIdGet'][0])
    {

        // verify the required parameter 'movie_id' is set
        if ($movie_id === null || (is_array($movie_id) && count($movie_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $movie_id when calling moviesMovieIdGet'
            );
        }


        $resourcePath = '/movies/{movieId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($movie_id !== null) {
            $resourcePath = str_replace(
                '{' . 'movieId' . '}',
                ObjectSerializer::toPathValue($movie_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation moviesMovieIdPut
     *
     * Update movie information
     *
     * @param  int $movie_id movie_id (required)
     * @param  \OpenAPI\Client\Model\Movie $movie movie (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['moviesMovieIdPut'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\Movie
     */
    public function moviesMovieIdPut($movie_id, $movie, string $contentType = self::contentTypes['moviesMovieIdPut'][0])
    {
        list($response) = $this->moviesMovieIdPutWithHttpInfo($movie_id, $movie, $contentType);
        return $response;
    }

    /**
     * Operation moviesMovieIdPutWithHttpInfo
     *
     * Update movie information
     *
     * @param  int $movie_id (required)
     * @param  \OpenAPI\Client\Model\Movie $movie (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['moviesMovieIdPut'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\Movie, HTTP status code, HTTP response headers (array of strings)
     */
    public function moviesMovieIdPutWithHttpInfo($movie_id, $movie, string $contentType = self::contentTypes['moviesMovieIdPut'][0])
    {
        $request = $this->moviesMovieIdPutRequest($movie_id, $movie, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\Movie' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\Movie' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\Movie', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\OpenAPI\Client\Model\Movie';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\Movie',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation moviesMovieIdPutAsync
     *
     * Update movie information
     *
     * @param  int $movie_id (required)
     * @param  \OpenAPI\Client\Model\Movie $movie (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['moviesMovieIdPut'] to see the possible values for this operation
     *
     * @return sdk\vendor\guzzlehttp\promises\src\PromiseInterface
     * @throws \InvalidArgumentException
     */
    public function moviesMovieIdPutAsync($movie_id, $movie, string $contentType = self::contentTypes['moviesMovieIdPut'][0])
    {
        return $this->moviesMovieIdPutAsyncWithHttpInfo($movie_id, $movie, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation moviesMovieIdPutAsyncWithHttpInfo
     *
     * Update movie information
     *
     * @param  int $movie_id (required)
     * @param  \OpenAPI\Client\Model\Movie $movie (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['moviesMovieIdPut'] to see the possible values for this operation
     *
     * @return sdk\vendor\guzzlehttp\promises\src\PromiseInterface
     * @throws \InvalidArgumentException
     */
    public function moviesMovieIdPutAsyncWithHttpInfo($movie_id, $movie, string $contentType = self::contentTypes['moviesMovieIdPut'][0])
    {
        $returnType = '\OpenAPI\Client\Model\Movie';
        $request = $this->moviesMovieIdPutRequest($movie_id, $movie, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'moviesMovieIdPut'
     *
     * @param  int $movie_id (required)
     * @param  \OpenAPI\Client\Model\Movie $movie (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['moviesMovieIdPut'] to see the possible values for this operation
     *
     * @return sdk\vendor\guzzlehttp\psr7\src\Request
     *@throws \InvalidArgumentException
     */
    public function moviesMovieIdPutRequest($movie_id, $movie, string $contentType = self::contentTypes['moviesMovieIdPut'][0])
    {

        // verify the required parameter 'movie_id' is set
        if ($movie_id === null || (is_array($movie_id) && count($movie_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $movie_id when calling moviesMovieIdPut'
            );
        }

        // verify the required parameter 'movie' is set
        if ($movie === null || (is_array($movie) && count($movie) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $movie when calling moviesMovieIdPut'
            );
        }


        $resourcePath = '/movies/{movieId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($movie_id !== null) {
            $resourcePath = str_replace(
                '{' . 'movieId' . '}',
                ObjectSerializer::toPathValue($movie_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($movie)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($movie));
            } else {
                $httpBody = $movie;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PUT',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation moviesPost
     *
     * Create a new movie
     *
     * @param  \OpenAPI\Client\Model\Movie $movie movie (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['moviesPost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\Movie
     */
    public function moviesPost($movie, string $contentType = self::contentTypes['moviesPost'][0])
    {
        list($response) = $this->moviesPostWithHttpInfo($movie, $contentType);
        return $response;
    }

    /**
     * Operation moviesPostWithHttpInfo
     *
     * Create a new movie
     *
     * @param  \OpenAPI\Client\Model\Movie $movie (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['moviesPost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\Movie, HTTP status code, HTTP response headers (array of strings)
     */
    public function moviesPostWithHttpInfo($movie, string $contentType = self::contentTypes['moviesPost'][0])
    {
        $request = $this->moviesPostRequest($movie, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 201:
                    if ('\OpenAPI\Client\Model\Movie' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\Movie' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\Movie', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\OpenAPI\Client\Model\Movie';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\Movie',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation moviesPostAsync
     *
     * Create a new movie
     *
     * @param  \OpenAPI\Client\Model\Movie $movie (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['moviesPost'] to see the possible values for this operation
     *
     * @return sdk\vendor\guzzlehttp\promises\src\PromiseInterface
     * @throws \InvalidArgumentException
     */
    public function moviesPostAsync($movie, string $contentType = self::contentTypes['moviesPost'][0])
    {
        return $this->moviesPostAsyncWithHttpInfo($movie, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation moviesPostAsyncWithHttpInfo
     *
     * Create a new movie
     *
     * @param  \OpenAPI\Client\Model\Movie $movie (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['moviesPost'] to see the possible values for this operation
     *
     * @return sdk\vendor\guzzlehttp\promises\src\PromiseInterface
     * @throws \InvalidArgumentException
     */
    public function moviesPostAsyncWithHttpInfo($movie, string $contentType = self::contentTypes['moviesPost'][0])
    {
        $returnType = '\OpenAPI\Client\Model\Movie';
        $request = $this->moviesPostRequest($movie, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'moviesPost'
     *
     * @param  \OpenAPI\Client\Model\Movie $movie (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['moviesPost'] to see the possible values for this operation
     *
     * @return sdk\vendor\guzzlehttp\psr7\src\Request
     *@throws \InvalidArgumentException
     */
    public function moviesPostRequest($movie, string $contentType = self::contentTypes['moviesPost'][0])
    {

        // verify the required parameter 'movie' is set
        if ($movie === null || (is_array($movie) && count($movie) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $movie when calling moviesPost'
            );
        }


        $resourcePath = '/movies';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($movie)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($movie));
            } else {
                $httpBody = $movie;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation reviewsGet
     *
     * Get list of reviews
     *
     * @param  int $movie_id Filter reviews by movie ID (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['reviewsGet'] to see the possible values for this operation
     *
     * @return sdk\lib\Model\Review[]
     *@throws \InvalidArgumentException
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     */
    public function reviewsGet($movie_id = null, string $contentType = self::contentTypes['reviewsGet'][0])
    {
        list($response) = $this->reviewsGetWithHttpInfo($movie_id, $contentType);
        return $response;
    }

    /**
     * Operation reviewsGetWithHttpInfo
     *
     * Get list of reviews
     *
     * @param  int $movie_id Filter reviews by movie ID (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['reviewsGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\Review[], HTTP status code, HTTP response headers (array of strings)
     */
    public function reviewsGetWithHttpInfo($movie_id = null, string $contentType = self::contentTypes['reviewsGet'][0])
    {
        $request = $this->reviewsGetRequest($movie_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\Review[]' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\Review[]' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\Review[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\OpenAPI\Client\Model\Review[]';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\Review[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation reviewsGetAsync
     *
     * Get list of reviews
     *
     * @param  int $movie_id Filter reviews by movie ID (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['reviewsGet'] to see the possible values for this operation
     *
     * @return sdk\vendor\guzzlehttp\promises\src\PromiseInterface
     * @throws \InvalidArgumentException
     */
    public function reviewsGetAsync($movie_id = null, string $contentType = self::contentTypes['reviewsGet'][0])
    {
        return $this->reviewsGetAsyncWithHttpInfo($movie_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation reviewsGetAsyncWithHttpInfo
     *
     * Get list of reviews
     *
     * @param  int $movie_id Filter reviews by movie ID (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['reviewsGet'] to see the possible values for this operation
     *
     * @return sdk\vendor\guzzlehttp\promises\src\PromiseInterface
     *@throws \InvalidArgumentException
     */
    public function reviewsGetAsyncWithHttpInfo($movie_id = null, string $contentType = self::contentTypes['reviewsGet'][0])
    {
        $returnType = '\OpenAPI\Client\Model\Review[]';
        $request = $this->reviewsGetRequest($movie_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'reviewsGet'
     *
     * @param  int $movie_id Filter reviews by movie ID (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['reviewsGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return sdk\vendor\guzzlehttp\psr7\src\Request
     */
    public function reviewsGetRequest($movie_id = null, string $contentType = self::contentTypes['reviewsGet'][0])
    {



        $resourcePath = '/reviews';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $movie_id,
            'movieId', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation reviewsPost
     *
     * Create a new review
     *
     * @param  sdk\lib\Model\Review $review review (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['reviewsPost'] to see the possible values for this operation
     *
     * @return sdk\lib\Model\Review
     *@throws \InvalidArgumentException
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     */
    public function reviewsPost($review, string $contentType = self::contentTypes['reviewsPost'][0])
    {
        list($response) = $this->reviewsPostWithHttpInfo($review, $contentType);
        return $response;
    }

    /**
     * Operation reviewsPostWithHttpInfo
     *
     * Create a new review
     *
     * @param  sdk\lib\Model\Review $review (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['reviewsPost'] to see the possible values for this operation
     *
     * @return array of \OpenAPI\Client\Model\Review, HTTP status code, HTTP response headers (array of strings)
     *@throws \InvalidArgumentException
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     */
    public function reviewsPostWithHttpInfo($review, string $contentType = self::contentTypes['reviewsPost'][0])
    {
        $request = $this->reviewsPostRequest($review, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 201:
                    if ('\php-sdk\lib\Model\Review' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\php-sdk\lib\Model\Review' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\php-sdk\lib\Model\Review', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\php-sdk\lib\Model\Review';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\php-sdk\lib\Model\Review',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation reviewsPostAsync
     *
     * Create a new review
     *
     * @param  sdk\lib\Model\Review $review (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['reviewsPost'] to see the possible values for this operation
     *
     * @return sdk\vendor\guzzlehttp\promises\src\PromiseInterface
     *@throws \InvalidArgumentException
     */
    public function reviewsPostAsync($review, string $contentType = self::contentTypes['reviewsPost'][0])
    {
        return $this->reviewsPostAsyncWithHttpInfo($review, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation reviewsPostAsyncWithHttpInfo
     *
     * Create a new review
     *
     * @param  sdk\lib\Model\Review $review (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['reviewsPost'] to see the possible values for this operation
     *
     * @return sdk\vendor\guzzlehttp\promises\src\PromiseInterface
     *@throws \InvalidArgumentException
     */
    public function reviewsPostAsyncWithHttpInfo($review, string $contentType = self::contentTypes['reviewsPost'][0])
    {
        $returnType = '\php-sdk\lib\Model\Review';
        $request = $this->reviewsPostRequest($review, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'reviewsPost'
     *
     * @param  sdk\lib\Model\Review $review (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['reviewsPost'] to see the possible values for this operation
     *
     * @return sdk\vendor\guzzlehttp\psr7\src\Request
     *@throws \InvalidArgumentException
     */
    public function reviewsPostRequest($review, string $contentType = self::contentTypes['reviewsPost'][0])
    {

        // verify the required parameter 'review' is set
        if ($review === null || (is_array($review) && count($review) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $review when calling reviewsPost'
            );
        }


        $resourcePath = '/reviews';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($review)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($review));
            } else {
                $httpBody = $review;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation reviewsReviewIdDelete
     *
     * Delete review
     *
     * @param  int $review_id review_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['reviewsReviewIdDelete'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function reviewsReviewIdDelete($review_id, string $contentType = self::contentTypes['reviewsReviewIdDelete'][0])
    {
        $this->reviewsReviewIdDeleteWithHttpInfo($review_id, $contentType);
    }

    /**
     * Operation reviewsReviewIdDeleteWithHttpInfo
     *
     * Delete review
     *
     * @param  int $review_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['reviewsReviewIdDelete'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function reviewsReviewIdDeleteWithHttpInfo($review_id, string $contentType = self::contentTypes['reviewsReviewIdDelete'][0])
    {
        $request = $this->reviewsReviewIdDeleteRequest($review_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation reviewsReviewIdDeleteAsync
     *
     * Delete review
     *
     * @param  int $review_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['reviewsReviewIdDelete'] to see the possible values for this operation
     *
     * @return sdk\vendor\guzzlehttp\promises\src\PromiseInterface
     *@throws \InvalidArgumentException
     */
    public function reviewsReviewIdDeleteAsync($review_id, string $contentType = self::contentTypes['reviewsReviewIdDelete'][0])
    {
        return $this->reviewsReviewIdDeleteAsyncWithHttpInfo($review_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation reviewsReviewIdDeleteAsyncWithHttpInfo
     *
     * Delete review
     *
     * @param  int $review_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['reviewsReviewIdDelete'] to see the possible values for this operation
     *
     * @return sdk\vendor\guzzlehttp\promises\src\PromiseInterface
     *@throws \InvalidArgumentException
     */
    public function reviewsReviewIdDeleteAsyncWithHttpInfo($review_id, string $contentType = self::contentTypes['reviewsReviewIdDelete'][0])
    {
        $returnType = '';
        $request = $this->reviewsReviewIdDeleteRequest($review_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'reviewsReviewIdDelete'
     *
     * @param  int $review_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['reviewsReviewIdDelete'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return sdk\vendor\guzzlehttp\psr7\src\Request
     */
    public function reviewsReviewIdDeleteRequest($review_id, string $contentType = self::contentTypes['reviewsReviewIdDelete'][0])
    {

        // verify the required parameter 'review_id' is set
        if ($review_id === null || (is_array($review_id) && count($review_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $review_id when calling reviewsReviewIdDelete'
            );
        }


        $resourcePath = '/reviews/{reviewId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($review_id !== null) {
            $resourcePath = str_replace(
                '{' . 'reviewId' . '}',
                ObjectSerializer::toPathValue($review_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'DELETE',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation reviewsReviewIdGet
     *
     * Get review by ID
     *
     * @param  int $review_id review_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['reviewsReviewIdGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return sdk\lib\Model\Review
     */
    public function reviewsReviewIdGet($review_id, string $contentType = self::contentTypes['reviewsReviewIdGet'][0])
    {
        list($response) = $this->reviewsReviewIdGetWithHttpInfo($review_id, $contentType);
        return $response;
    }

    /**
     * Operation reviewsReviewIdGetWithHttpInfo
     *
     * Get review by ID
     *
     * @param  int $review_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['reviewsReviewIdGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\Review, HTTP status code, HTTP response headers (array of strings)
     */
    public function reviewsReviewIdGetWithHttpInfo($review_id, string $contentType = self::contentTypes['reviewsReviewIdGet'][0])
    {
        $request = $this->reviewsReviewIdGetRequest($review_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('\php-sdk\lib\Model\Review' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\php-sdk\lib\Model\Review' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\php-sdk\lib\Model\Review', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\php-sdk\lib\Model\Review';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\php-sdk\lib\Model\Review',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation reviewsReviewIdGetAsync
     *
     * Get review by ID
     *
     * @param  int $review_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['reviewsReviewIdGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return sdk\vendor\guzzlehttp\promises\src\PromiseInterface
     */
    public function reviewsReviewIdGetAsync($review_id, string $contentType = self::contentTypes['reviewsReviewIdGet'][0])
    {
        return $this->reviewsReviewIdGetAsyncWithHttpInfo($review_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation reviewsReviewIdGetAsyncWithHttpInfo
     *
     * Get review by ID
     *
     * @param  int $review_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['reviewsReviewIdGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return sdk\vendor\guzzlehttp\promises\src\PromiseInterface
     */
    public function reviewsReviewIdGetAsyncWithHttpInfo($review_id, string $contentType = self::contentTypes['reviewsReviewIdGet'][0])
    {
        $returnType = '\php-sdk\lib\Model\Review';
        $request = $this->reviewsReviewIdGetRequest($review_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'reviewsReviewIdGet'
     *
     * @param  int $review_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['reviewsReviewIdGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return sdk\vendor\guzzlehttp\psr7\src\Request
     */
    public function reviewsReviewIdGetRequest($review_id, string $contentType = self::contentTypes['reviewsReviewIdGet'][0])
    {

        // verify the required parameter 'review_id' is set
        if ($review_id === null || (is_array($review_id) && count($review_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $review_id when calling reviewsReviewIdGet'
            );
        }


        $resourcePath = '/reviews/{reviewId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($review_id !== null) {
            $resourcePath = str_replace(
                '{' . 'reviewId' . '}',
                ObjectSerializer::toPathValue($review_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation reviewsReviewIdPut
     *
     * Update review
     *
     * @param  int $review_id review_id (required)
     * @param  sdk\lib\Model\Review $review review (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['reviewsReviewIdPut'] to see the possible values for this operation
     *
     * @return sdk\lib\Model\Review
     *@throws \InvalidArgumentException
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     */
    public function reviewsReviewIdPut($review_id, $review, string $contentType = self::contentTypes['reviewsReviewIdPut'][0])
    {
        list($response) = $this->reviewsReviewIdPutWithHttpInfo($review_id, $review, $contentType);
        return $response;
    }

    /**
     * Operation reviewsReviewIdPutWithHttpInfo
     *
     * Update review
     *
     * @param  int $review_id (required)
     * @param  sdk\lib\Model\Review $review (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['reviewsReviewIdPut'] to see the possible values for this operation
     *
     * @return array of \OpenAPI\Client\Model\Review, HTTP status code, HTTP response headers (array of strings)
     *@throws \InvalidArgumentException
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     */
    public function reviewsReviewIdPutWithHttpInfo($review_id, $review, string $contentType = self::contentTypes['reviewsReviewIdPut'][0])
    {
        $request = $this->reviewsReviewIdPutRequest($review_id, $review, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('\php-sdk\lib\Model\Review' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\php-sdk\lib\Model\Review' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\php-sdk\lib\Model\Review', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\php-sdk\lib\Model\Review';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\php-sdk\lib\Model\Review',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation reviewsReviewIdPutAsync
     *
     * Update review
     *
     * @param  int $review_id (required)
     * @param  sdk\lib\Model\Review $review (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['reviewsReviewIdPut'] to see the possible values for this operation
     *
     * @return sdk\vendor\guzzlehttp\promises\src\PromiseInterface
     *@throws \InvalidArgumentException
     */
    public function reviewsReviewIdPutAsync($review_id, $review, string $contentType = self::contentTypes['reviewsReviewIdPut'][0])
    {
        return $this->reviewsReviewIdPutAsyncWithHttpInfo($review_id, $review, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation reviewsReviewIdPutAsyncWithHttpInfo
     *
     * Update review
     *
     * @param  int $review_id (required)
     * @param  sdk\lib\Model\Review $review (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['reviewsReviewIdPut'] to see the possible values for this operation
     *
     * @return sdk\vendor\guzzlehttp\promises\src\PromiseInterface
     *@throws \InvalidArgumentException
     */
    public function reviewsReviewIdPutAsyncWithHttpInfo($review_id, $review, string $contentType = self::contentTypes['reviewsReviewIdPut'][0])
    {
        $returnType = '\php-sdk\lib\Model\Review';
        $request = $this->reviewsReviewIdPutRequest($review_id, $review, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'reviewsReviewIdPut'
     *
     * @param  int $review_id (required)
     * @param  sdk\lib\Model\Review $review (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['reviewsReviewIdPut'] to see the possible values for this operation
     *
     * @return sdk\vendor\guzzlehttp\psr7\src\Request
     *@throws \InvalidArgumentException
     */
    public function reviewsReviewIdPutRequest($review_id, $review, string $contentType = self::contentTypes['reviewsReviewIdPut'][0])
    {

        // verify the required parameter 'review_id' is set
        if ($review_id === null || (is_array($review_id) && count($review_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $review_id when calling reviewsReviewIdPut'
            );
        }

        // verify the required parameter 'review' is set
        if ($review === null || (is_array($review) && count($review) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $review when calling reviewsReviewIdPut'
            );
        }


        $resourcePath = '/reviews/{reviewId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($review_id !== null) {
            $resourcePath = str_replace(
                '{' . 'reviewId' . '}',
                ObjectSerializer::toPathValue($review_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($review)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($review));
            } else {
                $httpBody = $review;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PUT',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
